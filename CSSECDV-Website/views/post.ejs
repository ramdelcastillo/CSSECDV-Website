<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= post.title %>
    </title>

    <style>
        .dropdown-menu {
            display: none;
            position: absolute;
            right: 0;
            background-color: #1F2937;
            border-radius: 8px;
            min-width: 120px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 10;
            overflow: hidden;
        }

        .dropdown-menu a,
        .dropdown-menu button {
            display: block;
            padding: 8px 12px;
            color: white;
            text-decoration: none;
            width: 100%;
            text-align: left;
            border-radius: 8px;
        }

        .dropdown-menu a:hover,
        .dropdown-menu button:hover {
            background-color: #374151;
        }

        .modal {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: #1F2937;
            padding: 20px;
            border-radius: 12px;
            width: 700px;
            /* Increased width */
            max-width: 90%;
            min-height: 500px;
            /* Increased height */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
        }

        textarea#edit-content {
            height: 300px;
            /* Increased height */
            resize: vertical;
            /* Allows resizing if needed */
        }

        #confirmEditModal .modal-content {
            background: #1F2937;
            padding: 20px;
            border-radius: 12px;
            width: 700px;
            /* Match edit modal width */
            max-width: 90%;
            min-height: 500px;
            /* Match edit modal height */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            justify-content: center;
            /* Center content */
            align-items: center;
            /* Center content */
            text-align: center;
        }

        #confirmEditCommentModal .modal-content {
            background: #1F2937;
            padding: 20px;
            border-radius: 12px;
            width: 700px;
            /* Match edit modal width */
            max-width: 90%;
            min-height: 500px;
            /* Match edit modal height */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            justify-content: center;
            /* Center content */
            align-items: center;
            /* Center content */
            text-align: center;
        }

        #confirmDeleteModal .modal-content {
            background: #1F2937;
            padding: 20px;
            border-radius: 12px;
            width: 700px;
            /* Match edit modal width */
            max-width: 90%;
            min-height: 500px;
            /* Match edit modal height */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            justify-content: center;
            /* Center content */
            align-items: center;
            /* Center content */
            text-align: center;
        }

        #confirmDeleteCommentModal .modal-content {
            background: #1F2937;
            padding: 20px;
            border-radius: 12px;
            width: 700px;
            /* Match edit modal width */
            max-width: 90%;
            min-height: 500px;
            /* Match edit modal height */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            justify-content: center;
            /* Center content */
            align-items: center;
            /* Center content */
            text-align: center;
        }
    </style>

    <script>
        let cachedToken = null;
        let tokenExpiry = 0;
        let currentSlug = null;
        let currentCommentID = null;

        async function loadSignedImage(slug) {
            const now = Math.floor(Date.now() / 1000);
            if (cachedToken && now < tokenExpiry) {
                window.open(cachedToken, "_blank");
                return;
            }
            const response = await fetch(`/posts/${slug}/signed-url`);
            const data = await response.json();
            if (data.url && data.expiry) {
                cachedToken = data.url;
                tokenExpiry = data.expiry;
                window.open(data.url, "_blank");
            }
        }

        async function setSignedImageSrc(slug) {
            const now = Math.floor(Date.now() / 1000);
            let tokenData = JSON.parse(localStorage.getItem('signedToken'));

            // Check if the token exists and is not expired
            if (tokenData && tokenData.expiry > now && tokenData.slug === slug) {
                document.getElementById('post-image').src = tokenData.url;
            } else {
                const response = await fetch(`/posts/${slug}/signed-url`);
                const data = await response.json();
                if (data.url && data.expiry) {
                    // Store the token and expiry in local storage
                    localStorage.setItem('signedToken', JSON.stringify({ url: data.url, expiry: data.expiry, slug: slug }));
                    document.getElementById('post-image').src = data.url;
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            setSignedImageSrc('<%= post.slug %>');
        });

        function toggleDropdown(postId) {
            const menu = document.getElementById(`dropdown-${postId}`);
            menu.style.display = menu.style.display === "block" ? "none" : "block";
        }

        function openEditModal(slug, title, content, comment_limit) {
        currentSlug = slug;
        document.getElementById("edit-title").value = title;
        document.getElementById("edit-content").value = content;
    
        const commentLimitInput = document.getElementById("edit-comment-limit");
        commentLimitInput.value = comment_limit !== null ? comment_limit : ""; // Set existing limit or leave blank

        document.getElementById("editModal").style.display = "flex";
        }




        function closeEditModal() {
            document.getElementById("editModal").style.display = "none";

            const imageInput = document.getElementById("edit-image");
            const removeImageCheckbox = document.getElementById("remove-image");
            const cancelImageButton = document.querySelector(".mt-2.bg-red-500");

            if (imageInput) {
                imageInput.value = "";
                imageInput.style.display = "block";
            }
            if (cancelImageButton) {
                cancelImageButton.style.display = "none";
            }
            if (removeImageCheckbox) {
                removeImageCheckbox.checked = false;
                removeImageCheckbox.parentElement.style.display = "block";
                removeImageCheckbox.disabled = false;
            }

            // Close all dropdowns
            document.querySelectorAll('.dropdown-menu').forEach(menu => {
                menu.style.display = "none";
            });
        }

        function toggleImageOptions() {
            const options = document.getElementById("image-options");
            options.classList.toggle("hidden");
        }

        function handleRemoveImage() {
            const removeCheckbox = document.getElementById("remove-image");
            const imageInput = document.getElementById("edit-image");

            if (removeCheckbox.checked) {
                imageInput.disabled = true;
                imageInput.value = "";
            } else {
                imageInput.disabled = false;
            }
        }

        function handleImageUpload() {
            const removeCheckbox = document.getElementById("remove-image");
            const imageInput = document.getElementById("edit-image");

            if (imageInput.files.length > 0) {
                removeCheckbox.checked = false;
                removeCheckbox.disabled = true;
            } else {
                removeCheckbox.disabled = false;
            }
        }

        function openConfirmEditModal() {
            document.getElementById("confirmEditModal").style.display = "flex";
        }

        function closeConfirmEditModal() {
            document.getElementById("confirmEditModal").style.display = "none";
        }

        function openConfirmEditCommentModal() {
            document.getElementById("confirmEditCommentModal").style.display = "flex";
        }

        function closeConfirmEditCommentModal() {
            document.getElementById("confirmEditCommentModal").style.display = "none";
        }

        function openConfirmDeleteModal(slug) {
            currentSlug = slug;
            document.getElementById("confirmDeleteModal").style.display = "flex";
        }

        function closeConfirmDeleteModal() {
            document.getElementById("confirmDeleteModal").style.display = "none";
        }


        async function saveEdit() {
            closeConfirmEditModal();

            const title = document.getElementById("edit-title").value;
            const content = document.getElementById("edit-content").value;
            const commentLimit = document.getElementById("edit-comment-limit").value; // Get comment limit input
            const imageInput = document.getElementById("edit-image");
            const removeImageCheckbox = document.getElementById("remove-image");

            const formData = new FormData();
            formData.append("title", title);
            formData.append("content", content);

            if (commentLimit.trim() !== "") { 
                formData.append("commentLimit", commentLimit); 
            } 

            if (imageInput.files.length > 0) {
                formData.append("image", imageInput.files[0]);
            } else if (removeImageCheckbox && removeImageCheckbox.checked) {
                formData.append("removeImage", "true");
            }

            try {
        const response = await fetch(`/posts/${currentSlug}/edit`, {
            method: "POST",
            body: formData,
        });

        if (response.ok) {
            const data = await response.json();
            if (data.newSlug && data.newSlug !== currentSlug) {
                window.location.href = `/posts/${data.newSlug}`;
            } else {
                location.reload();
            }
        } else {
            const result = await response.json().catch(() => null); 
        if (result) {
            alert(result?.message || "Failed to update post."); 
        } else {
            alert("Failed to update post.");
        }
        }
    } catch (error) {
        console.error("Error updating post.");
    }
            }

        async function saveDelete() {
            closeConfirmDeleteModal();

            try {
        const response = await fetch(`/posts/${currentSlug}/delete`, {
            method: "POST",
        });

        if (response.ok) {
            window.location.href = "/home-posts";
        } else {
            const result = await response.json().catch(() => null);
            alert(result?.message || "Failed to delete post.");
        }
    } catch (error) {
        console.error("Error deleting post.");
   
    }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const imageInput = document.getElementById("edit-image");
            const removeImageCheckbox = document.getElementById("remove-image");
            const cancelImageButton = document.createElement("button");
            cancelImageButton.textContent = "Cancel Image";
            cancelImageButton.className = "mt-2 px-4 py-2 bg-red-500 text-white rounded hidden";
            cancelImageButton.addEventListener("click", function () {
                imageInput.value = "";
                cancelImageButton.style.display = "none";
                imageInput.style.display = "block";

                if (removeImageCheckbox) {
                    removeImageCheckbox.checked = false;
                    removeImageCheckbox.parentElement.style.display = "block";
                    removeImageCheckbox.disabled = false;
                }
            });

            if (imageInput) {
                imageInput.parentElement.appendChild(cancelImageButton);

                imageInput.addEventListener("change", function () {
                    if (imageInput.files.length > 0) {
                        if (removeImageCheckbox) {
                            removeImageCheckbox.parentElement.style.display = "none";
                            removeImageCheckbox.checked = false;
                        }
                        cancelImageButton.style.display = "block";
                    } else {
                        if (removeImageCheckbox) {
                            removeImageCheckbox.parentElement.style.display = "block";
                        }
                        cancelImageButton.style.display = "none";
                    }
                });

                if (removeImageCheckbox) {
                    removeImageCheckbox.addEventListener("change", function () {
                        if (removeImageCheckbox.checked) {
                            imageInput.style.display = "none";
                            cancelImageButton.style.display = "none";
                        } else {
                            imageInput.style.display = "block";
                        }
                    });
                }
            }
        });
        function confirmSaveEdit() {
            closeConfirmEditModal();
            saveEdit();
        }
        async function postComment(event) {
            event.preventDefault(); // Prevent form from submitting normally

            const commentContent = document.getElementById("comment-content").value.trim();
            const postId = "<%= post.id %>"; // Ensure post.id is available in EJS

            const formData = new FormData();
            formData.append("content", commentContent);
            formData.append("postId", postId);

            try {
                const response = await fetch(`/posts/<%= post.slug %>/post-comment`, {
                    method: "POST",
                    body: formData,
                });

                if (response.ok) {
                    location.reload(); // Refresh the page to show the new comment
                    alert("Added new comment.")
                } else {
                const errorData = await response.json();
                if (errorData.errors) {
                    alert(errorData.errors.map(err => err.msg).join("\n"));
                } else {
                alert(errorData.message || "Failed to update post.");
             }
            }
            } catch (error) {
                console.error("Error posting comment.");
            }
        }

        function openEditCommentModal(commentId, content) {
            currentCommentID = commentId;
            document.getElementById("edit-comment-content").value = content;
            document.getElementById("editCommentModal").style.display = "flex"; // Show modal
        }

        function openDeleteCommentModal(commentId) {
            currentCommentID = commentId;
            document.getElementById("confirmDeleteCommentModal").style.display = "flex"; // Show modal
        }

        function closeDeleteCommentModal() {
            document.getElementById("confirmDeleteCommentModal").style.display = "none"; // Show modal
        }

        function closeEditCommentModal() {
            const modal = document.getElementById("editCommentModal");
            const textarea = document.getElementById("edit-comment-content");

            modal.style.display = "none"; // Hide modal
            textarea.style.height = ""; // Reset textarea height
        }


        async function saveEditedComment() {
            const newComment = document.getElementById("edit-comment-content").value.trim();

            const formData = new FormData();
            formData.append("content", newComment);
            formData.append("commentId", currentCommentID);

            try {
                const response = await fetch(`/posts/<%= post.slug %>/edit-comment`, {
                    method: "POST",
                    body: formData
                });

                if (response.ok) {
                    location.reload(); // Refresh to show updated comment
                } else {
                const errorData = await response.json();
                if (errorData.errors) {
                    alert(errorData.errors.map(err => err.msg).join("\n"));
                } else {
                alert(errorData.message || "Failed to update post.");
             }
            }
            } catch (error) {
                console.error("Error editing comment.");
            }
        }

        async function deleteComment() {
            const formData = new FormData();

            formData.append("commentId", currentCommentID);

            try {
                const response = await fetch(`/posts/<%= post.slug %>/delete-comment`, {
                    method: "POST",
                    body: formData
                });

                if (response.ok) {
                    location.reload(); // Refresh to show updated comment
                } else {
                const errorData = await response.json();
                if (errorData.errors) {
                    alert(errorData.errors.map(err => err.msg).join("\n"));
                } else {
                alert(errorData.message || "Failed to update post.");
             }
            }
            } catch (error) {
                console.error("Error deleting comment.");
            }
        }

    </script>
</head>

<body class="bg-gray-900">
    <%- include(user ? 'partials/navbar-logged-on' : 'partials/navbar' , { page: 'post' }) %>

        <section class="bg-gray-900">
            <div class="container mx-auto mt-10">
                <div class="bg-gray-800 p-6 rounded-lg shadow-md relative">
                    <div class="flex justify-between items-center">
                        <h1 class="text-3xl font-bold text-white">
                            <%= post.title %>
                        </h1>
                        <% if (user && user.username===post.username) { %>
                            <button class="menu-btn text-white text-2xl"
                                onclick="toggleDropdown('<%= post.id %>')">&#x22EE;</button>
                            <div id="dropdown-<%= post.id %>" class="dropdown-menu absolute top-8 right-2">
                                <button
                                onclick="openEditModal('<%= post.slug %>', '<%= post.title %>', '<%= post.content %>', '<%= post.comment_limit %>')"
                                    class="block px-4 py-2 hover:bg-gray-700 rounded-lg">Edit</button>
                                <button onclick="openConfirmDeleteModal('<%= post.slug %>')"
                                    class="block px-4 py-2 hover:bg-red-700 rounded-lg text-red-400">Delete</button>
                            </div>
                            <% } %>
                    </div>
                    <p class="text-gray-400">By <a href="/profile/<%= post.username %>" class="text-white font-bold">
                            <%= post.username %>
                        </a> | <%= new Date(post.created_at).toLocaleString() %>
                            <% if (post.is_edited) { %>(Edited)<% } %>
                    </p>
                    <p class="mt-2 text-gray-300">
                        <%= post.content %>
                    </p>
                    <% if (post.image) { %>
                        <img id="post-image" alt="Post Image" class="mt-4 rounded-lg w-64 h-auto"
                            oncontextmenu="loadSignedImage('<%= post.slug %>'); return false;">
                        <% } %>
                </div>
            </div>
        </section>

        <section class="bg-gray-800 p-6 mt-6 rounded-lg shadow-md container mx-auto">
            <h2 class="text-2xl text-white font-bold mb-4">Comments</h2>
        
            <% if (post.comment_limit === 0) { %>
                <p class="text-gray-400">This user has disabled comments.</p>
            <% } else { %>
                <% 
                    // Filter out hidden comments
                    const visibleComments = comments.filter(comment => !comment.is_hidden); 
        
                    const displayedComments = post.comment_limit === null 
                        ? visibleComments 
                        : visibleComments.slice(0, post.comment_limit);
                %>
        
                <% if (displayedComments.length > 0) { %>
                    <% displayedComments.forEach(comment => { %>
                        <div class="bg-gray-700 p-4 rounded-lg mb-4">
                            <p class="text-gray-300">
                                <a href="/profile/<%= comment.username %>" class="text-white font-bold">
                                    <%= comment.username %>
                                </a> | <%= new Date(comment.created_at).toLocaleString() %>
                                <% if (comment.is_edited) { %>(Edited)<% } %>
                            </p>
                            <p class="mt-2 text-white">
                                <%= comment.content %>
                            </p>
        
                            <% if (user && user.username === comment.username) { %>
                                <button class="text-blue-400 text-sm"
                                    onclick="openEditCommentModal('<%= comment.id %>', `<%= comment.content %>`)">Edit</button>
                                <button class="text-red-400 text-sm ml-2"
                                    onclick="openDeleteCommentModal('<%= comment.id %>')">Delete</button>
                            <% } %>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p class="text-gray-400">No comments yet. Be the first to comment!</p>
                <% } %>
        
                <% if (isLoggedOn) { %>
                    <% if (post.comment_limit === null || visibleComments.length < post.comment_limit) { %>
                        <form id="comment-form" class="mt-4" onsubmit="postComment(event)">
                            <textarea id="comment-content" class="w-full p-2 bg-gray-700 text-white rounded"
                                placeholder="Write a comment..."></textarea>
                            <button type="submit" class="mt-2 px-4 py-2 bg-blue-500 text-white rounded">
                                Post Comment
                            </button>
                        </form>
                    <% } else { %>
                        <p class="text-gray-400 mt-2">The comment limit for this post has been reached.</p>
                    <% } %>
                <% } else { %>
                    <p class="text-gray-400 mt-2">
                        You must be <a href="/login" class="text-blue-400">logged in</a> to comment.
                    </p>
                <% } %>
            <% } %>
        </section>
        
        
        

        <div id="editModal" class="modal">
            <div class="modal-content">
                <h2 class="text-xl text-white font-semibold">Edit Post</h2>
                <input type="text" id="edit-title" class="w-full p-2 mt-2 bg-gray-700 text-white rounded"
                    placeholder="Title">
                <textarea id="edit-content" class="w-full p-2 mt-2 bg-gray-700 text-white rounded"
                    placeholder="Content"></textarea>
                    <div class="mt-2">
                        <label for="edit-comment-limit" class="text-white">Comment Limit (Leave blank for no limit)</label>
                        <input type="text" id="edit-comment-limit" 
                            class="w-full p-2 mt-1 bg-gray-700 text-white rounded" 
                            placeholder="Enter max number of comments">
                    </div>
                    
                <div class="mt-2">
                    <% if (post.image) { %>
                        <button onclick="toggleImageOptions()" id="edit-image-btn"
                            class="px-3 py-2 bg-gray-600 text-white rounded">
                            Edit Image
                        </button>
                        <div id="image-options" class="hidden mt-2">
                            <div id="add-image-container">
                                <p class="text-white">Replace the Image</p>
                                <input type="file" id="edit-image" class="w-full p-2 bg-gray-700 text-white rounded"
                                    onchange="handleImageUpload()">
                            </div>
                            <label class="text-white flex items-center mt-2">
                                <input type="checkbox" id="remove-image" onclick="handleRemoveImage()"> Remove Image
                            </label>
                        </div>
                        <% } else { %>
                            <div id="add-image-container">
                                <p class="text-white">Add an Image</p>
                                <input type="file" id="edit-image"
                                    class="w-full p-2 mt-2 bg-gray-700 text-white rounded">
                            </div>
                            <% } %>
                </div>
                


                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="openConfirmEditModal()"
                        class="px-4 py-2 bg-blue-500 text-white rounded">Save</button>
                    <button onclick="closeEditModal()" class="px-4 py-2 bg-gray-500 text-white rounded">Cancel</button>
                </div>

            </div>
        </div>

        <div id="editCommentModal" class="modal">
            <div class="modal-content" style="min-height: 150px; ">
                <h2 class="text-xl text-white font-semibold">Edit Comment</h2>
                <textarea id="edit-comment-content" class="w-full p-2 mt-2 bg-gray-700 text-white rounded"
                    placeholder="Edit your comment..."></textarea>

                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="openConfirmEditCommentModal()"
                        class="px-4 py-2 bg-blue-500 text-white rounded">Save</button>
                    <button onclick="closeEditCommentModal()"
                        class="px-4 py-2 bg-gray-500 text-white rounded">Cancel</button>
                </div>
            </div>
        </div>

        <div id="confirmEditModal" class="modal" style="display: none;">
            <div class="modal-content">
                <h2 class="text-xl text-white font-semibold">Confirm Edit</h2>
                <p class="text-gray-300">Are you sure you want to save these changes?</p>
                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="confirmSaveEdit()" class="px-4 py-2 bg-green-500 text-white rounded">Yes</button>
                    <button onclick="closeConfirmEditModal()"
                        class="px-4 py-2 bg-gray-500 text-white rounded">No</button>
                </div>
            </div>
        </div>

        <div id="confirmDeleteModal" class="modal" style="display: none;">
            <div class="modal-content">
                <h2 class="text-xl text-white font-semibold">Confirm Delete</h2>
                <p class="text-gray-300">Are you sure you want to delete this post? This action cannot be undone.</p>
                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="saveDelete()" class="px-4 py-2 bg-red-500 text-white rounded">Yes</button>
                    <button onclick="closeConfirmDeleteModal()"
                        class="px-4 py-2 bg-gray-500 text-white rounded">No</button>
                </div>
            </div>
        </div>

        <div id="confirmEditCommentModal" class="modal" style="display: none;">
            <div class="modal-content">
                <h2 class="text-xl text-white font-semibold">Confirm Edit</h2>
                <p class="text-gray-300">Are you sure you want to edit this comment?</p>
                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="saveEditedComment()" class="px-4 py-2 bg-green-500 text-white rounded">Yes</button>
                    <button onclick="closeConfirmEditCommentModal()"
                        class="px-4 py-2 bg-gray-500 text-white rounded">No</button>
                </div>
            </div>
        </div>

        <div id="confirmDeleteCommentModal" class="modal" style="display: none;">
            <div class="modal-content">
                <h2 class="text-xl text-white font-semibold">Confirm Delete</h2>
                <p class="text-gray-300">Are you sure you want to delete this comment? This action cannot be undone.</p>
                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="deleteComment()" class="px-4 py-2 bg-red-500 text-white rounded">Yes</button>
                    <button onclick="closeDeleteCommentModal()"
                        class="px-4 py-2 bg-gray-500 text-white rounded">No</button>
                </div>
            </div>
        </div>


</body>

</html>